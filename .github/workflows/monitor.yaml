name: Website Monitor (live)

on:
  schedule:
    - cron: "*/15 * * * *"     # every 15 min (UTC)
    - cron: "0 20 * * *"       # daily summary call at 20:00 UTC
  workflow_dispatch:
    inputs:
      mode:
        description: "check | daily | seed-baseline"
        required: false
        default: "check"

permissions:
  contents: write   # we commit the updated state file

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 twilio

      - name: Prepare folders
        run: mkdir -p state logs

      # Decide which command to run (scheduled or manual)
      - name: Decide command
        id: which
        run: |
          if [ "${{ github.event_name }}" = "schedule" ] && [ "${{ github.event.schedule }}" = "0 20 * * *" ]; then
            echo "cmd=--daily-summary" >> $GITHUB_OUTPUT
          else
            MODE="${{ github.event.inputs.mode }}"
            if [ "$MODE" = "daily" ]; then
              echo "cmd=--daily-summary" >> $GITHUB_OUTPUT
            elif [ "$MODE" = "seed-baseline" ]; then
              # seed baseline without calling: set last_value to the current extracted value and exit
              # uses probe to print it, then sets state to that value and performs a no-change check
              echo "cmd=seed" >> $GITHUB_OUTPUT
            else
              echo "cmd=--check" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Run monitor
        run: |
          if [ "${{ steps.which.outputs.cmd }}" = "seed" ]; then
            # get the current value (printed in logs) and seed it manually by invoking simulate-nochange path
            # 1) extract and print (no calls)
            python monitor.py --probe
            # 2) pull the extracted value from the last log line
            VAL="$(tail -n 50 logs/monitor.log | grep '\[PROBE\] Extracted value:' | tail -n 1 | sed 's/.*: //')"
            echo "Seeding baseline with: $VAL"
            python monitor.py --set-state "$VAL"
            python monitor.py --check --inject-value "$VAL"
          else
            python monitor.py ${{ steps.which.outputs.cmd }}
          fi
        env:
          # Monitor config
          MONITOR_URL: ${{ secrets.MONITOR_URL }}
          MONITOR_CSS_SELECTOR: ${{ secrets.MONITOR_CSS_SELECTOR }}
          MONITOR_REGEX_CAPTURE: ${{ secrets.MONITOR_REGEX_CAPTURE }}
          MONITOR_STATE_FILE: "state/monitor_state.json"
          MONITOR_LOG_DIR: "logs"
          MONITOR_CALL_ON_ERROR: "1"   # calls you if selector/regex breaks

          # Twilio (voice only)
          TWILIO_SID: ${{ secrets.TWILIO_SID }}
          TWILIO_AUTH: ${{ secrets.TWILIO_AUTH }}
          TWILIO_FROM: ${{ secrets.TWILIO_FROM }}
          TWILIO_TO: ${{ secrets.TWILIO_TO }}

      # Commit updated state so future runs remember the last value
      - name: Commit updated state (if changed)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if [ -n "$(git status --porcelain state/monitor_state.json)" ]; then
            git add state/monitor_state.json logs/monitor.log || true
            git commit -m "chore: update monitor state [skip ci]" || echo "No changes to commit"
            git push
          else
            echo "State unchanged; nothing to commit."
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: logs
          path: logs/**
          if-no-files-found: ignore
